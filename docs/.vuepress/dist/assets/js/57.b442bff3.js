(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{462:function(e,a,t){"use strict";t.r(a);var s=t(46),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-polyfill"}},[e._v("#")]),e._v(" Babel-polyfill")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#babel-preset-env-babel-polyfill和-babel-plugin-transform-runtime"}},[e._v("@babel/preset-env, @babel/polyfill和@babel/plugin-transform-runtime")])]),t("li",[t("a",{attrs:{href:"#polyfill"}},[e._v("polyfill")])]),t("li",[t("a",{attrs:{href:"#babel7中-corejs-和-corejs2-的区别"}},[e._v("babel7中 corejs 和 corejs2 的区别")])])])]),t("p"),e._v(" "),t("h3",{attrs:{id:"babel-preset-env-babel-polyfill和-babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-preset-env-babel-polyfill和-babel-plugin-transform-runtime"}},[e._v("#")]),e._v(" @babel/preset-env, @babel/polyfill和@babel/plugin-transform-runtime")]),e._v(" "),t("p",[e._v("这可以说是babel官方的得意之作，最早的时候没有这个包，有的是babel-preset-es2015这样的包，后来每次新标准发布之后，就要新加一个包。\nbabel顺应民意，发布了babel-preset-env这个包，它一次性囊括了已发布的所有标准包。\n首先我们需要明确一下，preset-env的首要作用，不是帮我们把ES6+代码转成ES5.它的首要作用是认读ES6+代码。\n在使用preset-env之前，babel是无法认识ES6+代码的，运行时会报Token错误。在使用preset-env之后，babel才能认识这些代码语法，并将它们抽象出AST树。\npreset-env本身包含了一大堆plugin，并通过配置来控制插件，从而控制转码效果")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code")])]),t("h3",{attrs:{id:"polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#polyfill"}},[e._v("#")]),e._v(" polyfill")]),e._v(" "),t("p",[e._v("babel 编译时只转换语法，几乎可以编译所有时新的 JavaScript 语法，但并不会转化BOM里面不兼容的API\n比如 Promise,Set,Symbol,Array.from,Array.is,async 等等的一些API\n这时候就需要 polyfill 来转转化这些API\nbabel 转译语法需要一些plugin\n如babel-preset-es2015,stage-0,stage-1等等\n其中的 es2015 表示 babel会加载 es6 相关的编译模块，然后 stage-0 表示的是什么呢？\nstage 系列集合了一些对 es7 的草案支持的插件，由于是草案，所以作为插件的形式提供。")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("stage"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" Strawman"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" just an idea"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" possible Babel plugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nstage"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" Proposal"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),e._v(" is worth working on"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nstage"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" Draft"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" initial spec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nstage"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" Candidate"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" complete spec and initial browser implementations"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nstage"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" Finished"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" will be added to the next yearly release"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])])]),t("p",[e._v("polyfill 有三种：\nbabel-runtime\nbabel-plugin-transform-runtime(推荐-默认依赖于babel-runtime)\nbabel-polyfill")]),e._v(" "),t("p",[e._v("在webpack中，babel-plugin-transform-runtime 实际上是依赖babel-runtime\n因为babel编译es6到es5的过程中，babel-plugin-transform-runtime这个插件会自动polyfill es5不支持的特性，\n这些polyfill包就是在babel-runtime这个包里 core-js 、regenerator等 polyfill。\nbabel-runtime和 babel-plugin-transform-runtime的区别是，相当一前者是手动挡而后者是自动挡，每当要转译一个api时都要手动加上require('babel-runtime')，\n而babel-plugin-transform-runtime会由工具自动添加，主要的功能是为api提供沙箱的垫片方案，不会污染全局的api，因此适合用在第三方的开发产品中。")]),e._v(" "),t("h3",{attrs:{id:"babel7中-corejs-和-corejs2-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel7中-corejs-和-corejs2-的区别"}},[e._v("#")]),e._v(" babel7中 corejs 和 corejs2 的区别")]),e._v(" "),t("p",[e._v("最近在给项目升级babel7，有一些改变但是变化不大,在升级中发现 babel7 变化挺大的，包括插件和包。 其中一项功能特别赞，就是 @babel/preset-env 中的 useBuiltIns 选项，如果你设置了 usage ，babel 编绎的时候就不用整个 polyfills , 只加载你使用 polyfills，这样就可以减少包的大小。 在使用 babel 中还想减少代码，就需要引入 babel 的运行时：")]),e._v(" "),t("p",[e._v("runtime转换器插件主要做了三件事：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("当你使用generators"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("async")]),e._v("方法、函数时自动调用babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("regenerator\n当你使用"),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("ES6")]),e._v(" 的Map或者内置的东西时自动调用babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("core"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("js\n移除内联babel helpers并替换使用babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("helpers来替换\n\n\ntransform"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime优点\n    不会污染全局变量\n    多次使用只会打包一次\n    依赖统一按需引入"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("无重复引入"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("无多余引入\n\ntransform"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime缺点\n   不支持实例化的方法Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("includes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" 就不能转化\n   如果使用的"),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("API")]),e._v("用的次数不是很多，那么transform"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime 引入polyfill的包会比不是transform"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime时大\n\nbabel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("polyfill则是通过改写全局prototype的方式实现，比较适合单独运行的项目。\n    开启babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("polyfill的方式，可以直接在代码中require，或者在webpack的entry中添加，也可以在babel的env中设置useBuildins为"),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("来开启。\n    但是babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("polyfill会有近"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("K，\n    打包后代码冗余量比较大，\n    对于现代的浏览器"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("有些不需要polyfill，造成流量浪费\n    污染了全局对象\n\n@babel"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("runtime"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("corejs2包含三个文件夹：\n    core"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("js  引用core"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("js这个npm包\n    helpers  定义了一些处理新的语法关键字的帮助函数\n    regenerator  仅仅是引用regenerator"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("runtime这个npm包\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);