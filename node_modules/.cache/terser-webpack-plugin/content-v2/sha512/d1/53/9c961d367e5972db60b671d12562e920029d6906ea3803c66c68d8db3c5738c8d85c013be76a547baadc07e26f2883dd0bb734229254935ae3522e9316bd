{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{374:function(t,s,a){t.exports=a.p+\"assets/img/request.24c2afdb.jpg\"},375:function(t,s,a){t.exports=a.p+\"assets/img/analysis.d5d98b73.jpg\"},376:function(t,s,a){t.exports=a.p+\"assets/img/browser.375a470e.jpg\"},377:function(t,s,a){t.exports=a.p+\"assets/img/renderTree.9906dac0.jpg\"},425:function(t,s,a){\"use strict\";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"输入url到页面加载的过程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#输入url到页面加载的过程\"}},[t._v(\"#\")]),t._v(\" 输入URL到页面加载的过程\")]),t._v(\" \"),n(\"p\"),n(\"div\",{staticClass:\"table-of-contents\"},[n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"#流程\"}},[t._v(\"流程\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#梳理主干流程\"}},[t._v(\"梳理主干流程\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#_1-从浏览器接收url到开启网络请求线程\"}},[t._v(\"1.从浏览器接收url到开启网络请求线程\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#_3-浏览器内核拿到内容后-渲染步骤大致\"}},[t._v(\"3.浏览器内核拿到内容后，渲染步骤大致\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#资源外链的下载\"}},[t._v(\"资源外链的下载\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#js引擎解析过程\"}},[t._v(\"JS引擎解析过程\")])])])]),n(\"p\"),t._v(\" \"),n(\"h2\",{attrs:{id:\"流程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#流程\"}},[t._v(\"#\")]),t._v(\" 流程\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"从浏览器接收url到开启网络请求线程 →→→ 开启网络线程到发出一个完整的http请求  →→→  服务器接收到请求到对应后台接收到请求\\n →→→ 后台和前台的http交互 →→→ 单独拎出来的缓存问题，http的缓存 →→→ 解析页面流程 →→→ \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"的可视化格式模型  →→→ \\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"引擎解析过程\\n\")])])]),n(\"h2\",{attrs:{id:\"梳理主干流程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#梳理主干流程\"}},[t._v(\"#\")]),t._v(\" 梳理主干流程\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\" 从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),t._v(\" 开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip请求，五层因特网协议栈等知识）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\" 从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\" 后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5.\")]),t._v(\" 单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"control等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"6.\")]),t._v(\" 浏览器接收到http数据包后的解析流程（解析html\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GPU\")]),t._v(\"绘制、外链资源的处理、loaded和domcontentloaded等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"7.\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"的可视化格式模型（元素的渲染规则，如包含块，控制框，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"BFC\")]),t._v(\"，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IFC\")]),t._v(\"等概念）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8.\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"引擎解析过程（\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"的解释阶段，预处理阶段，执行阶段生成执行上下文，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"VO\")]),t._v(\"，作用域链、回收机制等等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"9.\")]),t._v(\" 其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）\\n\")])])]),n(\"h2\",{attrs:{id:\"_1-从浏览器接收url到开启网络请求线程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-从浏览器接收url到开启网络请求线程\"}},[t._v(\"#\")]),t._v(\" 1.从浏览器接收url到开启网络请求线程\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"浏览器进程\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"线程模型，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"的运行机制\\n\\n多进程的浏览器\\n浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程（某些情况下多个tab会合并进程）\\n\\n进程可能包括主控进程，插件进程，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GPU\")]),t._v(\"，tab页（浏览器内核）等等\\n\\nBrowser进程：浏览器的主进程（负责协调、主控），只有一个\\n第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GPU\")]),t._v(\"进程：最多一个，用于\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),t._v(\"D绘制\\n浏览器渲染进程（内核）：默认每个Tab页面一个进程，互不影响，控制页面渲染，脚本执行，事件处理等（有时候会优化，如多个空白tab会合并成一个进程）\\n\")])])]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"解析\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),t._v(\"  →→→ 开启网络线程到发出一个完整的http请求（\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DNS\")]),t._v(\"查询得到\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IP\")]),t._v(\" ，tcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip请求 ，再到网络层的ip寻址，\\n再到数据链路层的封装成帧，最后到物理层的利用物理介质传输）\\n\\n\\n输入\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),t._v(\"后，会进行解析（\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),t._v(\"的本质就是统一资源定位符）\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),t._v(\"一般包括几大部分：\\nprotocol，协议头，譬如有http，ftp等\\nhost，主机域名或\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IP\")]),t._v(\"地址\\nport，端口号\\npath，目录路径\\nquery，即查询参数\\nfragment，即#后的hash值，一般用来定位到某个位置\\n\\n主要内容包括：dns查询，tcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip请求构建，五层因特网协议栈等等\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DNS\")]),t._v(\"查询得到\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IP\")]),t._v(\"\\n如果输入的是域名，需要进行dns解析成\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IP\")]),t._v(\"，大致流程：\\n\\n如果浏览器有缓存，直接使用浏览器缓存，否则使用本机缓存，再没有的话就是用host\\n如果本地没有，就向dns域名服务器查询（当然，中间可能还会经过路由，也有缓存等），查询到对应的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IP\")]),t._v(\"\\n注意，域名查询时有可能是经过了\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CDN\")]),t._v(\"调度器的（如果有cdn存储功能的话）\\n而且，需要知道dns解析是很耗时的，因此如果解析域名过多，会让首屏加载变得过慢，可以考虑dns\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"prefetch优化\\n\\ntcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip请求\\nhttp的本质就是tcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip请求\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),t._v(\"次握手规则建立连接以及断开连接时的四次挥手\\n\\n\")])])]),n(\"h1\",{attrs:{id:\"_2-服务器接收到请求到对应后台接收到请求\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-服务器接收到请求到对应后台接收到请求\"}},[t._v(\"#\")]),t._v(\" 2.服务器接收到请求到对应后台接收到请求\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"服务端在接收到请求时，内部会进行很多的处理\\n\\n负载均衡\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"对于大型的项目，由于并发访问量很大，所以往往一台服务器是吃不消的，所以一般会有若干台服务器组成一个集群，然后配合反向代理实现负载均衡\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了nginx控制负载均衡），然后调度服务器根据实际的调度算法，\\n分配不同的请求给对应集群中的服务器执行，然后调度器等待实际服务器的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),t._v(\"响应，并将它反馈给用户\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n后台的处理\\n一般有的后端是有统一的验证的，如安全拦截，跨域验证\\n如果这一步不符合规则，就直接返回了相应的http报文（如拒绝请求等）\\n然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）\\n等程序执行完毕后，就会返回一个http响应包（一般这一步也会经过多层封装）\\n然后就是将这个包从后端发送到前端，完成交互\\n\\n后台和前台的http交互\\n前后端交互时，http报文作为信息的载体\\n\\nhttp报文结构\\n报文一般包括了：通用头部，请求\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"响应头部，请求\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"响应体\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"xx——指示信息，表示请求已接收，继续处理\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\"xx——成功，表示请求已被成功接收、理解、接受\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),t._v(\"xx——重定向，要完成请求必须进行更进一步的操作\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4\")]),t._v(\"xx——客户端错误，请求有语法错误或请求无法实现\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),t._v(\"xx——服务器端错误，服务器未能实现合法的请求\\n\\n请求\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"响应头部\\nAccept\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 接收类型，表示浏览器支持的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MIME\")]),t._v(\"类型 （对标服务端返回的Content\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type）\\nAccept\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Encoding：浏览器支持的压缩类型\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"如gzip等\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"超出类型不能接收\\nContent\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type：客户端发送出去实体内容的类型\\nCache\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 指定请求和响应遵循的缓存机制，如no\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"cache\\nIf\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Modified\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Since：对应服务端的Last\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Modified，用来匹配看文件是否变动，只能精确到\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"s之内，http1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"中\\nExpires：缓存控制，在这个时间内不会请求，直接使用缓存，http1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"，而且是服务端时间\\nMax\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"age：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"中\\nIf\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"None\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Match：对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"中\\nCookie\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 有cookie并且同域访问时会自动带上\\nConnection\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 当浏览器与服务器通信时对于长连接如何进行处理\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"如keep\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"alive\\nHost：请求的服务器\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),t._v(\"\\nOrigin：最初的请求是从哪里发起的（只会精确到端口）\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"Origin比Referer更尊重隐私\\nReferer：该页面的来源\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"URL\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nUser\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Agent：用户客户端的一些必要信息，如\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"UA\")]),t._v(\"头部等\\n\\n常用的响应头部（部分）\\nAccess\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Allow\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Headers\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 服务器端允许的请求Headers\\nAccess\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Allow\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Methods\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 服务器端允许的请求方法\\nAccess\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Allow\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Origin\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 服务器端允许的请求Origin头部（譬如为\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"）\\nContent\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type：服务端返回的实体内容的类型\\nDate：数据从服务器发送的时间\\nCache\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档\\nLast\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Modified：请求资源的最后修改时间\\nExpires：应该在什么时候认为文档已经过期\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"从而不再缓存它\\nMax\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"age：客户端的本地资源应该缓存多少秒，开启了Cache\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control后有效\\nETag：请求变量的实体标签的当前值\\nSet\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端\\nKeep\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Alive：如果客户端有keep\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"alive，服务端也会有响应（如timeout\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"38\")]),t._v(\"）\\nServer：服务器的一些相关信息\\n\\n（请求头部和响应头部是匹配分析的。）\\n譬如，请求头部的Accept要和响应头部的Content\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type匹配，否则会报错\\n譬如，跨域请求时，请求头部的Origin要匹配响应头部的Access\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Allow\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Origin，否则会报跨域错误\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:a(374),alt:\"solar\"}})]),t._v(\" \"),n(\"h2\",{attrs:{id:\"_3-浏览器内核拿到内容后-渲染步骤大致\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-浏览器内核拿到内容后-渲染步骤大致\"}},[t._v(\"#\")]),t._v(\" 3.浏览器内核拿到内容后，渲染步骤大致\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\" 解析\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"，构建\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"树\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),t._v(\" 解析\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"，生成\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"规则树\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\" 合并\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"树和\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"规则，生成render树\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\" 布局render树（Layout\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"reflow），负责各元素尺寸、位置的计算\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5.\")]),t._v(\" 绘制render树（paint），绘制页面像素信息\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"6.\")]),t._v(\" 浏览器会将各层的信息发送给\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GPU\")]),t._v(\"，\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GPU\")]),t._v(\"会将各层合成（composite），显示在屏幕上\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:a(375),alt:\"solar\"}})]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"解析，构建\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"\\n\\n浏览器解析\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"，构建\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"树（Bytes → characters → tokens → nodes → \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\" Conversion转换：浏览器将获得的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"内容（Bytes）基于他的编码转换为单个字符\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),t._v(\" Tokenizing分词：浏览器按照\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"规范标准将这些字符转换为不同的标记token。每个token都有自己独特的含义以及规则集\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\" Lexing词法分析：分词的结果是得到一堆的token，此时把他们转换为对象，这些对象分别定义他们的属性和规则\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"构建：因为\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"标记定义的就是不同标签之间的关系，这个关系就像是一个树形结构一样\\n例如：body对象的父节点就是\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"对象，然后段略p对象的父节点就是body对象\\n\\n浏览器的处理如下：\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:a(376),alt:\"solar\"}})]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[t._v(\"渲染\\nrender树，接下来就是开始渲染\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:a(377),alt:\"solar\"}})]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\" 计算\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"样式\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),t._v(\" 构建渲染树\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\" 布局，主要定位坐标和大小，是否换行，各种position overflow z\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"index属性\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\" 绘制，将图像绘制出来\\n\\nLayout，也称为Reflow，即回流。一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树\\nRepaint，即重绘。意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"此时只需要应用新样式绘制这个元素就可以了\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"回流的成本开销要高于重绘，而且一个节点的回流往往回导致子节点以及同级节点的回流\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n什么会引起回流？\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\"页面渲染初始化\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"结构改变，比如删除了某个节点\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\"render树变化，比如减少了padding\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\"窗口resize\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5.\")]),t._v(\"最复杂的一种：获取某些属性，引发回流，\\n很多浏览器会对回流做优化，会等到数量足够时做一次批处理回流，\\n但是除了render树的直接变化，当获取一些属性时，浏览器为了获得正确的值也会触发回流，这样使得浏览器优化无效，包括\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"（1）offset\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Top\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Left\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Width\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Height\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n     \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"scroll\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Top\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Left\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Width\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Height\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n     \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cilent\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Top\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Left\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Width\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Height\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n     \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" width\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"height\")]),t._v(\"\\n     \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"调用了getComputedStyle\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"或者\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"IE\")]),t._v(\"的currentStyle\\n\\n回流一定伴随着重绘，重绘却可以单独出现\\n减少逐项更改样式，最好一次性更改style，或者将样式定义为\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\"并一次性更新\\n避免循环操作dom，创建一个documentFragment或div，在它上面应用所有\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"操作，最后再把它添加到window\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"document\\n避免多次读取offset等属性。无法避免则将它们缓存到变量\\n将复杂的元素绝对定位或固定定位，使得它脱离文档流，否则回流代价会很高\\n\")])])]),n(\"h2\",{attrs:{id:\"资源外链的下载\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#资源外链的下载\"}},[t._v(\"#\")]),t._v(\" 资源外链的下载\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"在解析html时，会遇到一些资源连接\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"样式资源 \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"脚本资源 img图片类资源 \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n外链时的处理\\n遇到上述的外链时，会单独开启一个下载线程去下载资源（http1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"中是每一个资源的下载都要开启一个http请求，对应一个tcp\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"ip链接）\\n\\n遇到\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"样式资源\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"下载时异步，不会阻塞浏览器构建\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"树\\n但是会阻塞渲染，也就是在构建render时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）\\n有例外，media query声明的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"CSS\")]),t._v(\"是不会阻塞渲染的\\n\\n遇到\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"脚本资源\\n阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTML\")]),t._v(\"\\n浏览器的优化，一般现代浏览器有优化，在脚本阻塞时，也会继续下载其它资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已\\ndefer与\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\"，普通的脚本是会阻塞浏览器解析的，但是可以加上defer或\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\"属性，这样脚本就变成异步了，可以等到解析完毕后再执行\\n注意，defer和\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\"是有区别的： defer是延迟执行，而\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\"是异步执行\\n\\n遇到img图片类资源\\n遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方\\n\\nloaded和domcontentloaded（简单的对比）\\nDOMContentLoaded 事件触发时，仅当\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"加载完成，不包括样式表，图片\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"譬如如果有\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\"加载的脚本就不一定完成\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nload 事件触发时，页面上所有的\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DOM\")]),t._v(\"，样式表，脚本，图片都已经加载完成了\\n\")])])]),n(\"h2\",{attrs:{id:\"js引擎解析过程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#js引擎解析过程\"}},[t._v(\"#\")]),t._v(\" JS引擎解析过程\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"是解释型语音，所以它无需提前编译，而是由解释器实时运行\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.\")]),t._v(\" 读取代码，进行词法分析（Lexical analysis），然后将代码分解成词元（token）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2.\")]),t._v(\" 对词元进行语法分析（parsing），然后将代码整理成语法树（syntax tree）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3.\")]),t._v(\" 使用翻译器（translator），将代码转为字节码（bytecode）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4.\")]),t._v(\" 使用字节码解释器（bytecode interpreter），将字节码转为机器码\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"的预处理阶段（变量提升，分号补全） →→→   \"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"的执行阶段（执行上下文，执行堆栈概念） →→→   回收机制\\n\\n预处理阶段：\\n变量提升 （包括函数提升和变量提升）\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"JS\")]),t._v(\"的执行阶段：\\n执行上下文，执行堆栈概念（如全局上下文，当前活动上下文）\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"VO\")]),t._v(\"（变量对象）和\"),n(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"AO\")]),t._v(\"（活动对象）\\n作用域链\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),t._v(\"机制等\\n\\n回收机制：\\n常用的两种垃圾回收规则是： （标记清除\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"引用计数 ） \\n\\n\\n\\n\")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}