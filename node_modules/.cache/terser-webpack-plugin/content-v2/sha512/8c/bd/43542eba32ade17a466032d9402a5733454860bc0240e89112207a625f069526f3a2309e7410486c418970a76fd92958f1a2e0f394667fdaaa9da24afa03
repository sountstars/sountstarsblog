{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{402:function(t,s,a){t.exports=a.p+\"assets/img/event_loop.2178b0c3.jpg\"},459:function(t,s,a){\"use strict\";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"event-loop\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#event-loop\"}},[t._v(\"#\")]),t._v(\" Event-Loop\")]),t._v(\" \"),n(\"p\"),n(\"div\",{staticClass:\"table-of-contents\"},[n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"#同步-异步-多线程\"}},[t._v(\"同步 & 异步 & 多线程\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#js中的异步操作\"}},[t._v(\"JS中的异步操作\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#event-loop-事件轮询\"}},[t._v(\"event-loop（事件轮询）\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#宏任务-微任务\"}},[t._v(\"宏任务 & 微任务\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#async-await-和-promise-的执行顺序\"}},[t._v(\"async/await 和 promise 的执行顺序\")]),n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"#async\"}},[t._v(\"async\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#await\"}},[t._v(\"await\")])])])])])]),n(\"p\"),t._v(\" \"),n(\"h2\",{attrs:{id:\"同步-异步-多线程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步-异步-多线程\"}},[t._v(\"#\")]),t._v(\" 同步 & 异步 & 多线程\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"同步与异步的区别\")])]),t._v(\" \"),n(\"p\",[t._v(\"同步（Synchronous）：在执行某个操作时，应用程序必须\"),n(\"code\",[t._v(\"等待该操作执行完成后\")]),t._v(\"才能继续执行。\"),n(\"br\"),t._v(\"\\n异步（Asynchronous）：在执行某个操作时，应用程序可在异步操作执行时继续执行。实质：异步操作，启动了新的，线程主线程与方法线程并行执行。\"),n(\"code\",[t._v(\"异步任务是不会进入主线程，而是会先进入任务队列\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"异步和多线程的区别\")])]),t._v(\" \"),n(\"p\",[t._v(\"我们已经知道， 异步和多线程并不是一个同等关系,\"),n(\"code\",[t._v(\"异步是最终目的,多线程只是我们实现异步的一种手段\")]),t._v(\"。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。实现异步可以采用多线程技术或则交给另外的进程来处理。\")]),t._v(\" \"),n(\"p\",[t._v(\"简单的说就是：异步线程是由\"),n(\"code\",[t._v(\"线程池\")]),t._v(\"负责管理，而多线程，我们可以自己控制，当然在多线程中我们也可以使用线程池。\")]),t._v(\" \"),n(\"p\",[n(\"a\",{attrs:{href:\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"机制详解\"),n(\"OutboundLink\")],1)]),t._v(\" \"),n(\"h2\",{attrs:{id:\"js中的异步操作\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#js中的异步操作\"}},[t._v(\"#\")]),t._v(\" JS中的异步操作\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"定时函数，如setTimeout setInterval requestAnimationFrame setImmediate(nodeJS）\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"IO 操作（输入/输出），如readFile readdir\")]),t._v(\" \"),n(\"li\",[t._v(\"网络请求，如ajax http.get（也可以同步，但是等待ajax请求响应之前，页面会卡住，用户什么都做不了,体验差）\")])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"事件绑定都是异步操作\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v('除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）只要指定过回调函数，这些事件发生时就会进入\"任务队列\"，等待主线程读取。')])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"回调函数可以理解为异步（不是严谨的异步操作，同步回调，异步回调）\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v('所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。')])])])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"event-loop-事件轮询\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#event-loop-事件轮询\"}},[t._v(\"#\")]),t._v(\" event-loop（事件轮询）\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(402),alt:\"solar\"}}),t._v('\\n主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API， 它们在\"任务队列\"中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取\"'),n(\"code\",[t._v(\"任务队列（task queue）\")]),t._v('\"，依次执行那些事件所对应的回调函数')]),t._v(\" \"),n(\"h2\",{attrs:{id:\"宏任务-微任务\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#宏任务-微任务\"}},[t._v(\"#\")]),t._v(\" 宏任务 & 微任务\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[n(\"code\",[t._v(\"微任务的优先级⽐宏任务的优先级要高\")])])]),t._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[n(\"strong\",[t._v(\"浏览器的任务队列:\")]),t._v(\" -主任务队列:存储的都是同步任务\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"等待任务队列:存储的都是异步任务\")])])]),t._v(\" \"),n(\"li\",[n(\"p\",[n(\"strong\",[t._v(\"微任务:\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"Promise的then回调函数\")]),t._v(\" \"),n(\"li\",[t._v(\"async函数中await下面的代码\")]),t._v(\" \"),n(\"li\",[t._v(\"process.nextTick（nodeJS）\")]),t._v(\" \"),n(\"li\",[t._v(\"MutationObserver(观察DOM树结构发生变化)\")])])]),t._v(\" \"),n(\"li\",[n(\"p\",[n(\"strong\",[t._v(\"宏任务:\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"定时器(setInterval/setTimeout)\")]),t._v(\" \"),n(\"li\",[t._v(\"requestAnimationFrame（专门用于处理动画的API）\")]),t._v(\" \"),n(\"li\",[t._v(\"setImmediate(nodeJS)\")])])])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"async-await-和-promise-的执行顺序\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#async-await-和-promise-的执行顺序\"}},[t._v(\"#\")]),t._v(\" async/await 和 promise 的执行顺序\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"async\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#async\"}},[t._v(\"#\")]),t._v(\" async\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"带 async 关键字的函数，它使得你的函数的返回值必定是 promise 对象\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fn1\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"123\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\nconsole\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fn1\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*\\nPromise {<resolved>: 123}\\n*/\")]),t._v(\"\\n\")])])]),n(\"h3\",{attrs:{id:\"await\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#await\"}},[t._v(\"#\")]),t._v(\" await\")]),t._v(\" \"),n(\"p\",[t._v(\"两种情况\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"不是promise对象\")]),t._v(\" \"),n(\"li\",[t._v(\"是promise对象\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如果不是 promise（\"),n(\"code\",[t._v(\"会被转成一个立即resolve的 Promise 对象\")]),t._v(\"） , await会阻塞后面（并非await后面那个函数）的代码，先执行async函数\"),n(\"code\",[t._v(\"外面\")]),t._v(\"的同步代码，同步代码执行完，再回到async内部，据需执行下面的方法\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如果它等到的是一个 promise 对象，await 也会\"),n(\"code\",[t._v(\"暂停\")]),t._v(\"async后面的代码，先执行async函数外面的同步代码，\"),n(\"code\",[t._v(\"等着Promise对象fulfilled\")]),t._v(\"，然后把 resolve 的参数作为 await 表达式的运算结果，然后在继续向下执行剩余的代码\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-js extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[t._v(\"ff\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"async\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'async1 start'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//【1】\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"await\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"async2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'async1 end'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//【2】\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"async2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Promise\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"resolve\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"11\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//【3】\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"resolve\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"22\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"then\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"data\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"data\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//【4】\")]),t._v(\"\\n            \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'外面'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//【5】\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*\\n解析：async函数下的方法，就想成跟普通的函数一样的就行，函数先执行【1】然后执行到await执行的async2，Promise内部相当于同步函数，然后执行【3】，\\n然后执行async外面的方法，发现没有，然后又回到ff函数内部，执行resolve里面的函数【4】,最后就该轮到【2】和【4】\\n*/\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*\\n* async1 start\\n* 11\\n* 22\\n* async1 end\\n* 外面\\n*/\")]),t._v(\"\\n\")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}